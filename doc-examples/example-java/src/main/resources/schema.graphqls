schema {
  query: Query
  mutation: Mutation
}

directive @stripHtml on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Query {
  searchProfile(contains: String! @stripHtml, limit: Int): [Profile!]!

  allBooks: [Book!]!

  currentUser: User
}

type Mutation {
  signIn(username: String!, password: String!): SignInPayload!

  signUp(input: SignUpInput!): SignUpPayload!

  addBook(id: ID!): AddBookPayload!
}

input SignUpInput {
  username: String! @stripHtml
  password: String!
  firstName: String!
  lastName: String!
}

type ValidationError {
  message: String!
  code: ValidationErrorCode!
}

enum ValidationErrorCode {
  NOT_FOUND
  DUPLICATE
}

type SecurityError {
  message: String!
  code: SecurityErrorCode!
}

enum SecurityErrorCode {
  INCORRECT_CREDENTIALS
  NOT_AUTHENTICATED
}

union Error = ValidationError | SecurityError

type SignInPayload {
  error: Error
  data: User
}

type SignUpPayload {
  error: Error
  data: User
}

type AddBookPayload {
  error: Error
}

type Profile {
  username: String!
  fullName: String!
}

type User {
  username: String!
  firstName: String!
  lastName: String!
  books: [Book!]!
}

type Book {
  id: ID!
  title: String!
  year: Int!
  sellers: [BookSeller!]!
}

type BookSeller {
  name: String!
  price: Float!
}
